name: Grant ArgoCD Access

on:
  workflow_dispatch:

env:
  AWS_REGION: us-west-2

permissions:
  id-token: write
  contents: read

jobs:
  grant_access:
    name: Grant ArgoCD Access
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          # Get cluster name
          CLUSTER_NAME=$(aws eks list-clusters --query "clusters[?contains(@, 'pet-hospital')]" --output text)
          echo "Using cluster: $CLUSTER_NAME"
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ env.AWS_REGION }}

      - name: Update aws-auth ConfigMap
        run: |
          echo "Updating aws-auth ConfigMap to grant user access to the cluster..."
          
          # Get the current aws-auth ConfigMap
          kubectl get configmap aws-auth -n kube-system -o yaml > aws-auth.yaml
          
          # Check if the user is already in the ConfigMap
          if ! grep -q "arn:aws:sts::622037664315:assumed-role/admin/anandsjo-Isengard" aws-auth.yaml; then
            # Add the user to the mapRoles section
            if grep -q "mapRoles:" aws-auth.yaml; then
              # mapRoles section exists, append to it
              sed -i '/mapRoles:/a \    - rolearn: arn:aws:sts::622037664315:assumed-role/admin/anandsjo-Isengard\n      username: admin\n      groups:\n        - system:masters' aws-auth.yaml
            else
              # mapRoles section doesn't exist, create it
              sed -i '/data:/a \  mapRoles: |\n    - rolearn: arn:aws:sts::622037664315:assumed-role/admin/anandsjo-Isengard\n      username: admin\n      groups:\n        - system:masters' aws-auth.yaml
            fi
            
            # Apply the updated ConfigMap
            kubectl apply -f aws-auth.yaml
            echo "User added to aws-auth ConfigMap"
          else
            echo "User already exists in aws-auth ConfigMap"
          fi

      - name: Fix ArgoCD Configuration
        run: |
          echo "Fixing ArgoCD configuration for proper access..."
          
          # Update ArgoCD ConfigMap for UI settings
          cat > argocd-cm-patch.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cm
            namespace: argocd
          data:
            url: https://argocd.example.com
            application.instanceLabelKey: argocd.argoproj.io/instance
          EOF
          
          kubectl apply -f argocd-cm-patch.yaml
          
          # Update ArgoCD server command parameters
          cat > argocd-cmd-params-patch.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cmd-params-cm
            namespace: argocd
          data:
            server.insecure: "true"
            server.staticassets: "/shared/app"
            server.log.level: "debug"
          EOF
          
          kubectl apply -f argocd-cmd-params-patch.yaml
          
          # Restart ArgoCD server to apply changes
          kubectl rollout restart deployment argocd-server -n argocd
          
          # Wait for ArgoCD server to be ready
          echo "Waiting for ArgoCD server to restart..."
          kubectl rollout status deployment argocd-server -n argocd --timeout=120s

      - name: Create Direct LoadBalancer Service
        run: |
          echo "Creating a direct LoadBalancer service for ArgoCD..."
          
          # Delete existing service if it exists
          kubectl delete service argocd-server-lb -n argocd --ignore-not-found
          
          # Create a new LoadBalancer service with proper configuration
          cat > argocd-lb-service.yaml << EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: argocd-server-lb
            namespace: argocd
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: nlb
              service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
          spec:
            ports:
            - name: http
              port: 80
              protocol: TCP
              targetPort: 8080
            - name: https
              port: 443
              protocol: TCP
              targetPort: 8080
            selector:
              app.kubernetes.io/name: argocd-server
            type: LoadBalancer
          EOF
          
          # Apply the service
          kubectl apply -f argocd-lb-service.yaml
          
          # Wait for the service to get an external IP
          echo "Waiting for LoadBalancer service to get an external IP..."
          sleep 60
          
          # Get the LoadBalancer URL
          LB_URL=$(kubectl get svc argocd-server-lb -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          if [ -n "$LB_URL" ]; then
            echo "ArgoCD is accessible directly at: http://${LB_URL}"
            echo "ARGOCD_LB_URL=http://${LB_URL}" >> $GITHUB_ENV
            
            # Get ArgoCD admin password
            ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
            echo "ArgoCD admin password: $ARGOCD_PASSWORD"
          else
            echo "Direct LoadBalancer URL not available yet."
          fi

      - name: Configure Security Groups
        run: |
          echo "Configuring security groups for both ALB and NLB..."
          
          # Get the NLB name
          NLB_NAME=$(kubectl get svc argocd-server-lb -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' | cut -d- -f1)
          
          if [ -n "$NLB_NAME" ]; then
            # Get the security group IDs for the worker nodes
            NODE_SECURITY_GROUPS=$(aws ec2 describe-instances --filters "Name=tag:kubernetes.io/cluster/$CLUSTER_NAME,Values=owned" --query "Reservations[*].Instances[*].SecurityGroups[*].GroupId" --output text)
            
            echo "Node security groups: $NODE_SECURITY_GROUPS"
            
            # For each security group, ensure it allows traffic from the NLB
            for SG_ID in $NODE_SECURITY_GROUPS; do
              echo "Updating security group $SG_ID to allow traffic from NLB..."
              
              # Allow inbound traffic on port 8080 from anywhere (for NLB)
              aws ec2 authorize-security-group-ingress \
                --group-id $SG_ID \
                --protocol tcp \
                --port 8080 \
                --cidr 0.0.0.0/0 || echo "Inbound rule already exists"
            done
          else
            echo "NLB not found or still being created"
          fi

      - name: Debug ArgoCD Setup
        run: |
          echo "Debugging ArgoCD setup..."
          
          # Check ArgoCD pods
          echo "ArgoCD pods:"
          kubectl get pods -n argocd
          
          # Check pod logs for argocd-server
          echo "ArgoCD server logs:"
          kubectl logs -l app.kubernetes.io/name=argocd-server -n argocd --tail=50
          
          # Check ArgoCD services
          echo "ArgoCD services:"
          kubectl get svc -n argocd
          
          # Check direct LoadBalancer service
          echo "Direct LoadBalancer service details:"
          kubectl get svc argocd-server-lb -n argocd -o yaml
          
          # Get ArgoCD admin password
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ArgoCD admin password: $ARGOCD_PASSWORD"
          
          # Get the LoadBalancer URL
          LB_URL=$(kubectl get svc argocd-server-lb -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          if [ -n "$LB_URL" ]; then
            echo "ArgoCD is accessible directly at: http://${LB_URL}"
            echo "ARGOCD_LB_URL=http://${LB_URL}" >> $GITHUB_ENV
            
            # Test connectivity to the LoadBalancer
            echo "Testing connectivity to LoadBalancer..."
            curl -v --max-time 10 http://${LB_URL} || echo "Connection failed or timed out"
          else
            echo "Direct LoadBalancer URL not available yet."
          fi
          
          echo "Access ArgoCD using username: admin and the password shown above."
