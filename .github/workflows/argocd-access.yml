name: Grant ArgoCD Access

on:
  workflow_dispatch:

env:
  AWS_REGION: us-west-2

permissions:
  id-token: write
  contents: read

jobs:
  grant_access:
    name: Grant ArgoCD Access
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          CLUSTER_NAME=$(aws eks list-clusters --query "clusters[?contains(@, 'pet-hospital')]" --output text)
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ env.AWS_REGION }}

      - name: Add user to aws-auth ConfigMap
        run: |
          kubectl patch configmap aws-auth -n kube-system --type=merge -p '{"data":{"mapRoles":"- rolearn: arn:aws:sts::622037664315:assumed-role/admin/anandsjo-Isengard\n  username: admin\n  groups:\n    - system:masters\n"}}'

      - name: Fix ArgoCD configuration
        run: |
          # Create required ConfigMaps
          cat > argocd-cm.yaml << 'EOF'
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cm
            namespace: argocd
          data:
            url: http://argocd-server
            application.instanceLabelKey: argocd.argoproj.io/instance
          EOF
          kubectl apply -f argocd-cm.yaml
          
          # Configure ArgoCD server for HTTP access
          cat > argocd-cmd-params.yaml << 'EOF'
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: argocd-cmd-params-cm
            namespace: argocd
          data:
            server.insecure: "true"
          EOF
          kubectl apply -f argocd-cmd-params.yaml
          
          # Restart ArgoCD server
          kubectl rollout restart deployment argocd-server -n argocd
          sleep 30

      - name: Create LoadBalancer for ArgoCD
        run: |
          cat > argocd-lb.yaml << 'EOF'
          apiVersion: v1
          kind: Service
          metadata:
            name: argocd-server-lb
            namespace: argocd
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
          spec:
            ports:
            - port: 80
              targetPort: 8080
            selector:
              app.kubernetes.io/name: argocd-server
            type: LoadBalancer
          EOF
          kubectl apply -f argocd-lb.yaml
          sleep 60
          
          # Get LoadBalancer URL
          LB_URL=$(kubectl get svc argocd-server-lb -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -n "$LB_URL" ]; then
            echo "ArgoCD URL: http://${LB_URL}"
          fi

      - name: Create port-forward script
        run: |
          cat > argocd-port-forward.sh << 'EOF'
          #!/bin/bash
          aws eks update-kubeconfig --name pet-hospital-eks-cluster --region us-west-2
          PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ArgoCD credentials: admin / $PASSWORD"
          kubectl port-forward svc/argocd-server -n argocd 8080:80
          EOF
          chmod +x argocd-port-forward.sh

      - name: Display access information
        run: |
          echo "===== ArgoCD Access Information ====="
          PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "Username: admin"
          echo "Password: $PASSWORD"
          
          LB_URL=$(kubectl get svc argocd-server-lb -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -n "$LB_URL" ]; then
            echo "LoadBalancer URL: http://${LB_URL}"
          fi
          
          echo "Local access: Run ./argocd-port-forward.sh"
          echo "====================================="
